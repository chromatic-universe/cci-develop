/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCI_MINI_RPC_TYPES_H
#define CCI_MINI_RPC_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* other thrift includes */
#include "shared_types.h"

/* custom thrift includes */

/* begin types */

struct _invalid_clang_op
{ 
  ThriftStruct parent; 

  /* public */
  gint32 what_op;
  gboolean __isset_what_op;
  gchar * wat;
  gboolean __isset_wat;
};
typedef struct _invalid_clang_op invalid_clang_op;

struct _invalid_clang_opClass
{
  ThriftStructClass parent;
};
typedef struct _invalid_clang_opClass invalid_clang_opClass;

GType invalid_clang_op_get_type (void);
#define TYPE_INVALID_CLANG_OP (invalid_clang_op_get_type())
#define INVALID_CLANG_OP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_INVALID_CLANG_OP, invalid_clang_op))
#define INVALID_CLANG_OP_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_INVALID_CLANG_OP, invalid_clang_opClass))
#define IS_INVALID_CLANG_OP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_INVALID_CLANG_OP))
#define IS_INVALID_CLANG_OP_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_INVALID_CLANG_OP))
#define INVALID_CLANG_OP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_INVALID_CLANG_OP, invalid_clang_opClass))

/* exception */
typedef enum
{
  INVALID_CLANG_OP_ERROR_CODE
} invalid_clang_opError;

GQuark invalid_clang_op_error_quark (void);
#define INVALID_CLANG_OP_ERROR (invalid_clang_op_error_quark())


/* constants */

/* struct cci_mini_clang_rpcPerformDiagArgs */
struct _cci_mini_clang_rpcPerformDiagArgs
{ 
  ThriftStruct parent; 

  /* public */
  gchar * index_module;
  gboolean __isset_index_module;
};
typedef struct _cci_mini_clang_rpcPerformDiagArgs cci_mini_clang_rpcPerformDiagArgs;

struct _cci_mini_clang_rpcPerformDiagArgsClass
{
  ThriftStructClass parent;
};
typedef struct _cci_mini_clang_rpcPerformDiagArgsClass cci_mini_clang_rpcPerformDiagArgsClass;

GType cci_mini_clang_rpc_perform_diag_args_get_type (void);
#define TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS (cci_mini_clang_rpc_perform_diag_args_get_type())
#define CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS, cci_mini_clang_rpcPerformDiagArgs))
#define CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS, cci_mini_clang_rpcPerformDiagArgsClass))
#define IS_CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS))
#define IS_CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS))
#define CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_ARGS, cci_mini_clang_rpcPerformDiagArgsClass))

/* struct cci_mini_clang_rpcPerformDiagResult */
struct _cci_mini_clang_rpcPerformDiagResult
{ 
  ThriftStruct parent; 

  /* public */
  gchar * success;
  gboolean __isset_success;
};
typedef struct _cci_mini_clang_rpcPerformDiagResult cci_mini_clang_rpcPerformDiagResult;

struct _cci_mini_clang_rpcPerformDiagResultClass
{
  ThriftStructClass parent;
};
typedef struct _cci_mini_clang_rpcPerformDiagResultClass cci_mini_clang_rpcPerformDiagResultClass;

GType cci_mini_clang_rpc_perform_diag_result_get_type (void);
#define TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT (cci_mini_clang_rpc_perform_diag_result_get_type())
#define CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT, cci_mini_clang_rpcPerformDiagResult))
#define CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT, cci_mini_clang_rpcPerformDiagResultClass))
#define IS_CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT))
#define IS_CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT))
#define CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CCI_MINI_CLANG_RPC_PERFORM_DIAG_RESULT, cci_mini_clang_rpcPerformDiagResultClass))

#endif /* CCI_MINI_RPC_TYPES_H */
