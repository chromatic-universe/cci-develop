/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCI_MINI_CLANG_RPC_H
#define CCI_MINI_CLANG_RPC_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "cci_mini_rpc_types.h"
#include "shared_service.h"

/* cci_mini_clang_rpc service interface */
typedef struct _cci_mini_clang_rpcIf cci_mini_clang_rpcIf;  /* dummy object */

struct _cci_mini_clang_rpcIfInterface
{
  GTypeInterface parent;

  gboolean (*perform_diag) (cci_mini_clang_rpcIf *iface, gchar ** _return, const gchar * index_module, GError **error);
};
typedef struct _cci_mini_clang_rpcIfInterface cci_mini_clang_rpcIfInterface;

GType cci_mini_clang_rpc_if_get_type (void);
#define TYPE_CCI_MINI_CLANG_RPC_IF (cci_mini_clang_rpc_if_get_type())
#define CCI_MINI_CLANG_RPC_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CCI_MINI_CLANG_RPC_IF, cci_mini_clang_rpcIf))
#define IS_CCI_MINI_CLANG_RPC_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CCI_MINI_CLANG_RPC_IF))
#define CCI_MINI_CLANG_RPC_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_CCI_MINI_CLANG_RPC_IF, cci_mini_clang_rpcIfInterface))

gboolean cci_mini_clang_rpc_if_perform_diag (cci_mini_clang_rpcIf *iface, gchar ** _return, const gchar * index_module, GError **error);

/* cci_mini_clang_rpc service client */
struct _cci_mini_clang_rpcClient
{
  SharedServiceClient parent;
};
typedef struct _cci_mini_clang_rpcClient cci_mini_clang_rpcClient;

struct _cci_mini_clang_rpcClientClass
{
  SharedServiceClientClass parent;
};
typedef struct _cci_mini_clang_rpcClientClass cci_mini_clang_rpcClientClass;

GType cci_mini_clang_rpc_client_get_type (void);
#define TYPE_CCI_MINI_CLANG_RPC_CLIENT (cci_mini_clang_rpc_client_get_type())
#define CCI_MINI_CLANG_RPC_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CCI_MINI_CLANG_RPC_CLIENT, cci_mini_clang_rpcClient))
#define CCI_MINI_CLANG_RPC_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_CCI_MINI_CLANG_RPC_CLIENT, cci_mini_clang_rpcClientClass))
#define CCI_MINI_CLANG_RPC_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CCI_MINI_CLANG_RPC_CLIENT))
#define CCI_MINI_CLANG_RPC_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CCI_MINI_CLANG_RPC_CLIENT))
#define CCI_MINI_CLANG_RPC_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CCI_MINI_CLANG_RPC_CLIENT, cci_mini_clang_rpcClientClass))

gboolean cci_mini_clang_rpc_client_perform_diag (cci_mini_clang_rpcIf * iface, gchar ** _return, const gchar * index_module, GError ** error);
gboolean cci_mini_clang_rpc_client_send_perform_diag (cci_mini_clang_rpcIf * iface, const gchar * index_module, GError ** error);
gboolean cci_mini_clang_rpc_client_recv_perform_diag (cci_mini_clang_rpcIf * iface, gchar ** _return, GError ** error);
void cci_mini_clang_rpc_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void cci_mini_clang_rpc_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* cci_mini_clang_rpc handler (abstract base class) */
struct _cci_mini_clang_rpcHandler
{
  SharedServiceHandler parent;
};
typedef struct _cci_mini_clang_rpcHandler cci_mini_clang_rpcHandler;

struct _cci_mini_clang_rpcHandlerClass
{
  SharedServiceHandlerClass parent;

  gboolean (*perform_diag) (cci_mini_clang_rpcIf *iface, gchar ** _return, const gchar * index_module, GError **error);
};
typedef struct _cci_mini_clang_rpcHandlerClass cci_mini_clang_rpcHandlerClass;

GType cci_mini_clang_rpc_handler_get_type (void);
#define TYPE_CCI_MINI_CLANG_RPC_HANDLER (cci_mini_clang_rpc_handler_get_type())
#define CCI_MINI_CLANG_RPC_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CCI_MINI_CLANG_RPC_HANDLER, cci_mini_clang_rpcHandler))
#define IS_CCI_MINI_CLANG_RPC_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CCI_MINI_CLANG_RPC_HANDLER))
#define CCI_MINI_CLANG_RPC_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_CCI_MINI_CLANG_RPC_HANDLER, cci_mini_clang_rpcHandlerClass))
#define IS_CCI_MINI_CLANG_RPC_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CCI_MINI_CLANG_RPC_HANDLER))
#define CCI_MINI_CLANG_RPC_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CCI_MINI_CLANG_RPC_HANDLER, cci_mini_clang_rpcHandlerClass))

gboolean cci_mini_clang_rpc_handler_perform_diag (cci_mini_clang_rpcIf *iface, gchar ** _return, const gchar * index_module, GError **error);

/* cci_mini_clang_rpc processor */
struct _cci_mini_clang_rpcProcessor
{
  SharedServiceProcessor parent;

  /* protected */
  cci_mini_clang_rpcHandler *handler;
  GHashTable *process_map;
};
typedef struct _cci_mini_clang_rpcProcessor cci_mini_clang_rpcProcessor;

struct _cci_mini_clang_rpcProcessorClass
{
  SharedServiceProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _cci_mini_clang_rpcProcessorClass cci_mini_clang_rpcProcessorClass;

GType cci_mini_clang_rpc_processor_get_type (void);
#define TYPE_CCI_MINI_CLANG_RPC_PROCESSOR (cci_mini_clang_rpc_processor_get_type())
#define CCI_MINI_CLANG_RPC_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CCI_MINI_CLANG_RPC_PROCESSOR, cci_mini_clang_rpcProcessor))
#define IS_CCI_MINI_CLANG_RPC_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CCI_MINI_CLANG_RPC_PROCESSOR))
#define CCI_MINI_CLANG_RPC_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_CCI_MINI_CLANG_RPC_PROCESSOR, cci_mini_clang_rpcProcessorClass))
#define IS_CCI_MINI_CLANG_RPC_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CCI_MINI_CLANG_RPC_PROCESSOR))
#define CCI_MINI_CLANG_RPC_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CCI_MINI_CLANG_RPC_PROCESSOR, cci_mini_clang_rpcProcessorClass))

#endif /* CCI_MINI_CLANG_RPC_H */
