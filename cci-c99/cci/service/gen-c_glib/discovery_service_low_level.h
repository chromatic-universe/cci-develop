/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DISCOVERY_SERVICE_LOW_LEVEL_H
#define DISCOVERY_SERVICE_LOW_LEVEL_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "curator_types.h"

/* DiscoveryServiceLowLevel service interface */
typedef struct _DiscoveryServiceLowLevelIf DiscoveryServiceLowLevelIf;  /* dummy object */

struct _DiscoveryServiceLowLevelIfInterface
{
  GTypeInterface parent;

  gboolean (*query_for_instance) (DiscoveryServiceLowLevelIf *iface, DiscoveryInstance ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, const gchar * id, CuratorException ** ex1, GError **error);
  gboolean (*query_for_instances) (DiscoveryServiceLowLevelIf *iface, GPtrArray ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, CuratorException ** ex1, GError **error);
  gboolean (*query_for_names) (DiscoveryServiceLowLevelIf *iface, GPtrArray ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, CuratorException ** ex1, GError **error);
  gboolean (*register_instance) (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);
  gboolean (*unregister_instance) (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);
  gboolean (*update_instance) (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);
};
typedef struct _DiscoveryServiceLowLevelIfInterface DiscoveryServiceLowLevelIfInterface;

GType discovery_service_low_level_if_get_type (void);
#define TYPE_DISCOVERY_SERVICE_LOW_LEVEL_IF (discovery_service_low_level_if_get_type())
#define DISCOVERY_SERVICE_LOW_LEVEL_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_IF, DiscoveryServiceLowLevelIf))
#define IS_DISCOVERY_SERVICE_LOW_LEVEL_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_IF))
#define DISCOVERY_SERVICE_LOW_LEVEL_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_IF, DiscoveryServiceLowLevelIfInterface))

gboolean discovery_service_low_level_if_query_for_instance (DiscoveryServiceLowLevelIf *iface, DiscoveryInstance ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, const gchar * id, CuratorException ** ex1, GError **error);
gboolean discovery_service_low_level_if_query_for_instances (DiscoveryServiceLowLevelIf *iface, GPtrArray ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, CuratorException ** ex1, GError **error);
gboolean discovery_service_low_level_if_query_for_names (DiscoveryServiceLowLevelIf *iface, GPtrArray ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, CuratorException ** ex1, GError **error);
gboolean discovery_service_low_level_if_register_instance (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);
gboolean discovery_service_low_level_if_unregister_instance (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);
gboolean discovery_service_low_level_if_update_instance (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);

/* DiscoveryServiceLowLevel service client */
struct _DiscoveryServiceLowLevelClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _DiscoveryServiceLowLevelClient DiscoveryServiceLowLevelClient;

struct _DiscoveryServiceLowLevelClientClass
{
  GObjectClass parent;
};
typedef struct _DiscoveryServiceLowLevelClientClass DiscoveryServiceLowLevelClientClass;

GType discovery_service_low_level_client_get_type (void);
#define TYPE_DISCOVERY_SERVICE_LOW_LEVEL_CLIENT (discovery_service_low_level_client_get_type())
#define DISCOVERY_SERVICE_LOW_LEVEL_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_CLIENT, DiscoveryServiceLowLevelClient))
#define DISCOVERY_SERVICE_LOW_LEVEL_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_CLIENT, DiscoveryServiceLowLevelClientClass))
#define DISCOVERY_SERVICE_LOW_LEVEL_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_CLIENT))
#define DISCOVERY_SERVICE_LOW_LEVEL_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_CLIENT))
#define DISCOVERY_SERVICE_LOW_LEVEL_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_CLIENT, DiscoveryServiceLowLevelClientClass))

gboolean discovery_service_low_level_client_query_for_instance (DiscoveryServiceLowLevelIf * iface, DiscoveryInstance ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, const gchar * id, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_send_query_for_instance (DiscoveryServiceLowLevelIf * iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, const gchar * id, GError ** error);
gboolean discovery_service_low_level_client_recv_query_for_instance (DiscoveryServiceLowLevelIf * iface, DiscoveryInstance ** _return, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_query_for_instances (DiscoveryServiceLowLevelIf * iface, GPtrArray ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_send_query_for_instances (DiscoveryServiceLowLevelIf * iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, GError ** error);
gboolean discovery_service_low_level_client_recv_query_for_instances (DiscoveryServiceLowLevelIf * iface, GPtrArray ** _return, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_query_for_names (DiscoveryServiceLowLevelIf * iface, GPtrArray ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_send_query_for_names (DiscoveryServiceLowLevelIf * iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, GError ** error);
gboolean discovery_service_low_level_client_recv_query_for_names (DiscoveryServiceLowLevelIf * iface, GPtrArray ** _return, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_register_instance (DiscoveryServiceLowLevelIf * iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_send_register_instance (DiscoveryServiceLowLevelIf * iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, GError ** error);
gboolean discovery_service_low_level_client_recv_register_instance (DiscoveryServiceLowLevelIf * iface, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_unregister_instance (DiscoveryServiceLowLevelIf * iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_send_unregister_instance (DiscoveryServiceLowLevelIf * iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, GError ** error);
gboolean discovery_service_low_level_client_recv_unregister_instance (DiscoveryServiceLowLevelIf * iface, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_update_instance (DiscoveryServiceLowLevelIf * iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError ** error);
gboolean discovery_service_low_level_client_send_update_instance (DiscoveryServiceLowLevelIf * iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, GError ** error);
gboolean discovery_service_low_level_client_recv_update_instance (DiscoveryServiceLowLevelIf * iface, CuratorException ** ex1, GError ** error);
void discovery_service_low_level_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void discovery_service_low_level_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* DiscoveryServiceLowLevel handler (abstract base class) */
struct _DiscoveryServiceLowLevelHandler
{
  GObject parent;
};
typedef struct _DiscoveryServiceLowLevelHandler DiscoveryServiceLowLevelHandler;

struct _DiscoveryServiceLowLevelHandlerClass
{
  GObjectClass parent;

  gboolean (*query_for_instance) (DiscoveryServiceLowLevelIf *iface, DiscoveryInstance ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, const gchar * id, CuratorException ** ex1, GError **error);
  gboolean (*query_for_instances) (DiscoveryServiceLowLevelIf *iface, GPtrArray ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, CuratorException ** ex1, GError **error);
  gboolean (*query_for_names) (DiscoveryServiceLowLevelIf *iface, GPtrArray ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, CuratorException ** ex1, GError **error);
  gboolean (*register_instance) (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);
  gboolean (*unregister_instance) (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);
  gboolean (*update_instance) (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);
};
typedef struct _DiscoveryServiceLowLevelHandlerClass DiscoveryServiceLowLevelHandlerClass;

GType discovery_service_low_level_handler_get_type (void);
#define TYPE_DISCOVERY_SERVICE_LOW_LEVEL_HANDLER (discovery_service_low_level_handler_get_type())
#define DISCOVERY_SERVICE_LOW_LEVEL_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_HANDLER, DiscoveryServiceLowLevelHandler))
#define IS_DISCOVERY_SERVICE_LOW_LEVEL_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_HANDLER))
#define DISCOVERY_SERVICE_LOW_LEVEL_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_HANDLER, DiscoveryServiceLowLevelHandlerClass))
#define IS_DISCOVERY_SERVICE_LOW_LEVEL_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_HANDLER))
#define DISCOVERY_SERVICE_LOW_LEVEL_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_HANDLER, DiscoveryServiceLowLevelHandlerClass))

gboolean discovery_service_low_level_handler_query_for_instance (DiscoveryServiceLowLevelIf *iface, DiscoveryInstance ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, const gchar * id, CuratorException ** ex1, GError **error);
gboolean discovery_service_low_level_handler_query_for_instances (DiscoveryServiceLowLevelIf *iface, GPtrArray ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const gchar * name, CuratorException ** ex1, GError **error);
gboolean discovery_service_low_level_handler_query_for_names (DiscoveryServiceLowLevelIf *iface, GPtrArray ** _return, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, CuratorException ** ex1, GError **error);
gboolean discovery_service_low_level_handler_register_instance (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);
gboolean discovery_service_low_level_handler_unregister_instance (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);
gboolean discovery_service_low_level_handler_update_instance (DiscoveryServiceLowLevelIf *iface, const CuratorProjection * projection, const DiscoveryProjection * discoveryProjection, const DiscoveryInstance * instance, CuratorException ** ex1, GError **error);

/* DiscoveryServiceLowLevel processor */
struct _DiscoveryServiceLowLevelProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  DiscoveryServiceLowLevelHandler *handler;
  GHashTable *process_map;
};
typedef struct _DiscoveryServiceLowLevelProcessor DiscoveryServiceLowLevelProcessor;

struct _DiscoveryServiceLowLevelProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _DiscoveryServiceLowLevelProcessorClass DiscoveryServiceLowLevelProcessorClass;

GType discovery_service_low_level_processor_get_type (void);
#define TYPE_DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR (discovery_service_low_level_processor_get_type())
#define DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR, DiscoveryServiceLowLevelProcessor))
#define IS_DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR))
#define DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR, DiscoveryServiceLowLevelProcessorClass))
#define IS_DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR))
#define DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DISCOVERY_SERVICE_LOW_LEVEL_PROCESSOR, DiscoveryServiceLowLevelProcessorClass))

#endif /* DISCOVERY_SERVICE_LOW_LEVEL_H */
