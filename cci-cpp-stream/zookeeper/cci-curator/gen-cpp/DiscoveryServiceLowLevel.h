/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DiscoveryServiceLowLevel_H
#define DiscoveryServiceLowLevel_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "curator_types.h"

namespace shared {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DiscoveryServiceLowLevelIf {
 public:
  virtual ~DiscoveryServiceLowLevelIf() {}
  virtual void queryForInstance(DiscoveryInstance& _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name, const std::string& id) = 0;
  virtual void queryForInstances(std::vector<DiscoveryInstance> & _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name) = 0;
  virtual void queryForNames(std::vector<std::string> & _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection) = 0;
  virtual void registerInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance) = 0;
  virtual void unregisterInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance) = 0;
  virtual void updateInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance) = 0;
};

class DiscoveryServiceLowLevelIfFactory {
 public:
  typedef DiscoveryServiceLowLevelIf Handler;

  virtual ~DiscoveryServiceLowLevelIfFactory() {}

  virtual DiscoveryServiceLowLevelIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DiscoveryServiceLowLevelIf* /* handler */) = 0;
};

class DiscoveryServiceLowLevelIfSingletonFactory : virtual public DiscoveryServiceLowLevelIfFactory {
 public:
  DiscoveryServiceLowLevelIfSingletonFactory(const boost::shared_ptr<DiscoveryServiceLowLevelIf>& iface) : iface_(iface) {}
  virtual ~DiscoveryServiceLowLevelIfSingletonFactory() {}

  virtual DiscoveryServiceLowLevelIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DiscoveryServiceLowLevelIf* /* handler */) {}

 protected:
  boost::shared_ptr<DiscoveryServiceLowLevelIf> iface_;
};

class DiscoveryServiceLowLevelNull : virtual public DiscoveryServiceLowLevelIf {
 public:
  virtual ~DiscoveryServiceLowLevelNull() {}
  void queryForInstance(DiscoveryInstance& /* _return */, const CuratorProjection& /* projection */, const DiscoveryProjection& /* discoveryProjection */, const std::string& /* name */, const std::string& /* id */) {
    return;
  }
  void queryForInstances(std::vector<DiscoveryInstance> & /* _return */, const CuratorProjection& /* projection */, const DiscoveryProjection& /* discoveryProjection */, const std::string& /* name */) {
    return;
  }
  void queryForNames(std::vector<std::string> & /* _return */, const CuratorProjection& /* projection */, const DiscoveryProjection& /* discoveryProjection */) {
    return;
  }
  void registerInstance(const CuratorProjection& /* projection */, const DiscoveryProjection& /* discoveryProjection */, const DiscoveryInstance& /* instance */) {
    return;
  }
  void unregisterInstance(const CuratorProjection& /* projection */, const DiscoveryProjection& /* discoveryProjection */, const DiscoveryInstance& /* instance */) {
    return;
  }
  void updateInstance(const CuratorProjection& /* projection */, const DiscoveryProjection& /* discoveryProjection */, const DiscoveryInstance& /* instance */) {
    return;
  }
};

typedef struct _DiscoveryServiceLowLevel_queryForInstance_args__isset {
  _DiscoveryServiceLowLevel_queryForInstance_args__isset() : projection(false), discoveryProjection(false), name(false), id(false) {}
  bool projection :1;
  bool discoveryProjection :1;
  bool name :1;
  bool id :1;
} _DiscoveryServiceLowLevel_queryForInstance_args__isset;

class DiscoveryServiceLowLevel_queryForInstance_args {
 public:

  DiscoveryServiceLowLevel_queryForInstance_args(const DiscoveryServiceLowLevel_queryForInstance_args&);
  DiscoveryServiceLowLevel_queryForInstance_args& operator=(const DiscoveryServiceLowLevel_queryForInstance_args&);
  DiscoveryServiceLowLevel_queryForInstance_args() : name(), id() {
  }

  virtual ~DiscoveryServiceLowLevel_queryForInstance_args() throw();
  CuratorProjection projection;
  DiscoveryProjection discoveryProjection;
  std::string name;
  std::string id;

  _DiscoveryServiceLowLevel_queryForInstance_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_discoveryProjection(const DiscoveryProjection& val);

  void __set_name(const std::string& val);

  void __set_id(const std::string& val);

  bool operator == (const DiscoveryServiceLowLevel_queryForInstance_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(discoveryProjection == rhs.discoveryProjection))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_queryForInstance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_queryForInstance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryServiceLowLevel_queryForInstance_pargs {
 public:


  virtual ~DiscoveryServiceLowLevel_queryForInstance_pargs() throw();
  const CuratorProjection* projection;
  const DiscoveryProjection* discoveryProjection;
  const std::string* name;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_queryForInstance_result__isset {
  _DiscoveryServiceLowLevel_queryForInstance_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryServiceLowLevel_queryForInstance_result__isset;

class DiscoveryServiceLowLevel_queryForInstance_result {
 public:

  DiscoveryServiceLowLevel_queryForInstance_result(const DiscoveryServiceLowLevel_queryForInstance_result&);
  DiscoveryServiceLowLevel_queryForInstance_result& operator=(const DiscoveryServiceLowLevel_queryForInstance_result&);
  DiscoveryServiceLowLevel_queryForInstance_result() {
  }

  virtual ~DiscoveryServiceLowLevel_queryForInstance_result() throw();
  DiscoveryInstance success;
  CuratorException ex1;

  _DiscoveryServiceLowLevel_queryForInstance_result__isset __isset;

  void __set_success(const DiscoveryInstance& val);

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryServiceLowLevel_queryForInstance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_queryForInstance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_queryForInstance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_queryForInstance_presult__isset {
  _DiscoveryServiceLowLevel_queryForInstance_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryServiceLowLevel_queryForInstance_presult__isset;

class DiscoveryServiceLowLevel_queryForInstance_presult {
 public:


  virtual ~DiscoveryServiceLowLevel_queryForInstance_presult() throw();
  DiscoveryInstance* success;
  CuratorException ex1;

  _DiscoveryServiceLowLevel_queryForInstance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiscoveryServiceLowLevel_queryForInstances_args__isset {
  _DiscoveryServiceLowLevel_queryForInstances_args__isset() : projection(false), discoveryProjection(false), name(false) {}
  bool projection :1;
  bool discoveryProjection :1;
  bool name :1;
} _DiscoveryServiceLowLevel_queryForInstances_args__isset;

class DiscoveryServiceLowLevel_queryForInstances_args {
 public:

  DiscoveryServiceLowLevel_queryForInstances_args(const DiscoveryServiceLowLevel_queryForInstances_args&);
  DiscoveryServiceLowLevel_queryForInstances_args& operator=(const DiscoveryServiceLowLevel_queryForInstances_args&);
  DiscoveryServiceLowLevel_queryForInstances_args() : name() {
  }

  virtual ~DiscoveryServiceLowLevel_queryForInstances_args() throw();
  CuratorProjection projection;
  DiscoveryProjection discoveryProjection;
  std::string name;

  _DiscoveryServiceLowLevel_queryForInstances_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_discoveryProjection(const DiscoveryProjection& val);

  void __set_name(const std::string& val);

  bool operator == (const DiscoveryServiceLowLevel_queryForInstances_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(discoveryProjection == rhs.discoveryProjection))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_queryForInstances_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_queryForInstances_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryServiceLowLevel_queryForInstances_pargs {
 public:


  virtual ~DiscoveryServiceLowLevel_queryForInstances_pargs() throw();
  const CuratorProjection* projection;
  const DiscoveryProjection* discoveryProjection;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_queryForInstances_result__isset {
  _DiscoveryServiceLowLevel_queryForInstances_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryServiceLowLevel_queryForInstances_result__isset;

class DiscoveryServiceLowLevel_queryForInstances_result {
 public:

  DiscoveryServiceLowLevel_queryForInstances_result(const DiscoveryServiceLowLevel_queryForInstances_result&);
  DiscoveryServiceLowLevel_queryForInstances_result& operator=(const DiscoveryServiceLowLevel_queryForInstances_result&);
  DiscoveryServiceLowLevel_queryForInstances_result() {
  }

  virtual ~DiscoveryServiceLowLevel_queryForInstances_result() throw();
  std::vector<DiscoveryInstance>  success;
  CuratorException ex1;

  _DiscoveryServiceLowLevel_queryForInstances_result__isset __isset;

  void __set_success(const std::vector<DiscoveryInstance> & val);

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryServiceLowLevel_queryForInstances_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_queryForInstances_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_queryForInstances_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_queryForInstances_presult__isset {
  _DiscoveryServiceLowLevel_queryForInstances_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryServiceLowLevel_queryForInstances_presult__isset;

class DiscoveryServiceLowLevel_queryForInstances_presult {
 public:


  virtual ~DiscoveryServiceLowLevel_queryForInstances_presult() throw();
  std::vector<DiscoveryInstance> * success;
  CuratorException ex1;

  _DiscoveryServiceLowLevel_queryForInstances_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiscoveryServiceLowLevel_queryForNames_args__isset {
  _DiscoveryServiceLowLevel_queryForNames_args__isset() : projection(false), discoveryProjection(false) {}
  bool projection :1;
  bool discoveryProjection :1;
} _DiscoveryServiceLowLevel_queryForNames_args__isset;

class DiscoveryServiceLowLevel_queryForNames_args {
 public:

  DiscoveryServiceLowLevel_queryForNames_args(const DiscoveryServiceLowLevel_queryForNames_args&);
  DiscoveryServiceLowLevel_queryForNames_args& operator=(const DiscoveryServiceLowLevel_queryForNames_args&);
  DiscoveryServiceLowLevel_queryForNames_args() {
  }

  virtual ~DiscoveryServiceLowLevel_queryForNames_args() throw();
  CuratorProjection projection;
  DiscoveryProjection discoveryProjection;

  _DiscoveryServiceLowLevel_queryForNames_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_discoveryProjection(const DiscoveryProjection& val);

  bool operator == (const DiscoveryServiceLowLevel_queryForNames_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(discoveryProjection == rhs.discoveryProjection))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_queryForNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_queryForNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryServiceLowLevel_queryForNames_pargs {
 public:


  virtual ~DiscoveryServiceLowLevel_queryForNames_pargs() throw();
  const CuratorProjection* projection;
  const DiscoveryProjection* discoveryProjection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_queryForNames_result__isset {
  _DiscoveryServiceLowLevel_queryForNames_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryServiceLowLevel_queryForNames_result__isset;

class DiscoveryServiceLowLevel_queryForNames_result {
 public:

  DiscoveryServiceLowLevel_queryForNames_result(const DiscoveryServiceLowLevel_queryForNames_result&);
  DiscoveryServiceLowLevel_queryForNames_result& operator=(const DiscoveryServiceLowLevel_queryForNames_result&);
  DiscoveryServiceLowLevel_queryForNames_result() {
  }

  virtual ~DiscoveryServiceLowLevel_queryForNames_result() throw();
  std::vector<std::string>  success;
  CuratorException ex1;

  _DiscoveryServiceLowLevel_queryForNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryServiceLowLevel_queryForNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_queryForNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_queryForNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_queryForNames_presult__isset {
  _DiscoveryServiceLowLevel_queryForNames_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryServiceLowLevel_queryForNames_presult__isset;

class DiscoveryServiceLowLevel_queryForNames_presult {
 public:


  virtual ~DiscoveryServiceLowLevel_queryForNames_presult() throw();
  std::vector<std::string> * success;
  CuratorException ex1;

  _DiscoveryServiceLowLevel_queryForNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiscoveryServiceLowLevel_registerInstance_args__isset {
  _DiscoveryServiceLowLevel_registerInstance_args__isset() : projection(false), discoveryProjection(false), instance(false) {}
  bool projection :1;
  bool discoveryProjection :1;
  bool instance :1;
} _DiscoveryServiceLowLevel_registerInstance_args__isset;

class DiscoveryServiceLowLevel_registerInstance_args {
 public:

  DiscoveryServiceLowLevel_registerInstance_args(const DiscoveryServiceLowLevel_registerInstance_args&);
  DiscoveryServiceLowLevel_registerInstance_args& operator=(const DiscoveryServiceLowLevel_registerInstance_args&);
  DiscoveryServiceLowLevel_registerInstance_args() {
  }

  virtual ~DiscoveryServiceLowLevel_registerInstance_args() throw();
  CuratorProjection projection;
  DiscoveryProjection discoveryProjection;
  DiscoveryInstance instance;

  _DiscoveryServiceLowLevel_registerInstance_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_discoveryProjection(const DiscoveryProjection& val);

  void __set_instance(const DiscoveryInstance& val);

  bool operator == (const DiscoveryServiceLowLevel_registerInstance_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(discoveryProjection == rhs.discoveryProjection))
      return false;
    if (!(instance == rhs.instance))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_registerInstance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_registerInstance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryServiceLowLevel_registerInstance_pargs {
 public:


  virtual ~DiscoveryServiceLowLevel_registerInstance_pargs() throw();
  const CuratorProjection* projection;
  const DiscoveryProjection* discoveryProjection;
  const DiscoveryInstance* instance;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_registerInstance_result__isset {
  _DiscoveryServiceLowLevel_registerInstance_result__isset() : ex1(false) {}
  bool ex1 :1;
} _DiscoveryServiceLowLevel_registerInstance_result__isset;

class DiscoveryServiceLowLevel_registerInstance_result {
 public:

  DiscoveryServiceLowLevel_registerInstance_result(const DiscoveryServiceLowLevel_registerInstance_result&);
  DiscoveryServiceLowLevel_registerInstance_result& operator=(const DiscoveryServiceLowLevel_registerInstance_result&);
  DiscoveryServiceLowLevel_registerInstance_result() {
  }

  virtual ~DiscoveryServiceLowLevel_registerInstance_result() throw();
  CuratorException ex1;

  _DiscoveryServiceLowLevel_registerInstance_result__isset __isset;

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryServiceLowLevel_registerInstance_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_registerInstance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_registerInstance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_registerInstance_presult__isset {
  _DiscoveryServiceLowLevel_registerInstance_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _DiscoveryServiceLowLevel_registerInstance_presult__isset;

class DiscoveryServiceLowLevel_registerInstance_presult {
 public:


  virtual ~DiscoveryServiceLowLevel_registerInstance_presult() throw();
  CuratorException ex1;

  _DiscoveryServiceLowLevel_registerInstance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiscoveryServiceLowLevel_unregisterInstance_args__isset {
  _DiscoveryServiceLowLevel_unregisterInstance_args__isset() : projection(false), discoveryProjection(false), instance(false) {}
  bool projection :1;
  bool discoveryProjection :1;
  bool instance :1;
} _DiscoveryServiceLowLevel_unregisterInstance_args__isset;

class DiscoveryServiceLowLevel_unregisterInstance_args {
 public:

  DiscoveryServiceLowLevel_unregisterInstance_args(const DiscoveryServiceLowLevel_unregisterInstance_args&);
  DiscoveryServiceLowLevel_unregisterInstance_args& operator=(const DiscoveryServiceLowLevel_unregisterInstance_args&);
  DiscoveryServiceLowLevel_unregisterInstance_args() {
  }

  virtual ~DiscoveryServiceLowLevel_unregisterInstance_args() throw();
  CuratorProjection projection;
  DiscoveryProjection discoveryProjection;
  DiscoveryInstance instance;

  _DiscoveryServiceLowLevel_unregisterInstance_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_discoveryProjection(const DiscoveryProjection& val);

  void __set_instance(const DiscoveryInstance& val);

  bool operator == (const DiscoveryServiceLowLevel_unregisterInstance_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(discoveryProjection == rhs.discoveryProjection))
      return false;
    if (!(instance == rhs.instance))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_unregisterInstance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_unregisterInstance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryServiceLowLevel_unregisterInstance_pargs {
 public:


  virtual ~DiscoveryServiceLowLevel_unregisterInstance_pargs() throw();
  const CuratorProjection* projection;
  const DiscoveryProjection* discoveryProjection;
  const DiscoveryInstance* instance;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_unregisterInstance_result__isset {
  _DiscoveryServiceLowLevel_unregisterInstance_result__isset() : ex1(false) {}
  bool ex1 :1;
} _DiscoveryServiceLowLevel_unregisterInstance_result__isset;

class DiscoveryServiceLowLevel_unregisterInstance_result {
 public:

  DiscoveryServiceLowLevel_unregisterInstance_result(const DiscoveryServiceLowLevel_unregisterInstance_result&);
  DiscoveryServiceLowLevel_unregisterInstance_result& operator=(const DiscoveryServiceLowLevel_unregisterInstance_result&);
  DiscoveryServiceLowLevel_unregisterInstance_result() {
  }

  virtual ~DiscoveryServiceLowLevel_unregisterInstance_result() throw();
  CuratorException ex1;

  _DiscoveryServiceLowLevel_unregisterInstance_result__isset __isset;

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryServiceLowLevel_unregisterInstance_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_unregisterInstance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_unregisterInstance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_unregisterInstance_presult__isset {
  _DiscoveryServiceLowLevel_unregisterInstance_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _DiscoveryServiceLowLevel_unregisterInstance_presult__isset;

class DiscoveryServiceLowLevel_unregisterInstance_presult {
 public:


  virtual ~DiscoveryServiceLowLevel_unregisterInstance_presult() throw();
  CuratorException ex1;

  _DiscoveryServiceLowLevel_unregisterInstance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiscoveryServiceLowLevel_updateInstance_args__isset {
  _DiscoveryServiceLowLevel_updateInstance_args__isset() : projection(false), discoveryProjection(false), instance(false) {}
  bool projection :1;
  bool discoveryProjection :1;
  bool instance :1;
} _DiscoveryServiceLowLevel_updateInstance_args__isset;

class DiscoveryServiceLowLevel_updateInstance_args {
 public:

  DiscoveryServiceLowLevel_updateInstance_args(const DiscoveryServiceLowLevel_updateInstance_args&);
  DiscoveryServiceLowLevel_updateInstance_args& operator=(const DiscoveryServiceLowLevel_updateInstance_args&);
  DiscoveryServiceLowLevel_updateInstance_args() {
  }

  virtual ~DiscoveryServiceLowLevel_updateInstance_args() throw();
  CuratorProjection projection;
  DiscoveryProjection discoveryProjection;
  DiscoveryInstance instance;

  _DiscoveryServiceLowLevel_updateInstance_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_discoveryProjection(const DiscoveryProjection& val);

  void __set_instance(const DiscoveryInstance& val);

  bool operator == (const DiscoveryServiceLowLevel_updateInstance_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(discoveryProjection == rhs.discoveryProjection))
      return false;
    if (!(instance == rhs.instance))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_updateInstance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_updateInstance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryServiceLowLevel_updateInstance_pargs {
 public:


  virtual ~DiscoveryServiceLowLevel_updateInstance_pargs() throw();
  const CuratorProjection* projection;
  const DiscoveryProjection* discoveryProjection;
  const DiscoveryInstance* instance;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_updateInstance_result__isset {
  _DiscoveryServiceLowLevel_updateInstance_result__isset() : ex1(false) {}
  bool ex1 :1;
} _DiscoveryServiceLowLevel_updateInstance_result__isset;

class DiscoveryServiceLowLevel_updateInstance_result {
 public:

  DiscoveryServiceLowLevel_updateInstance_result(const DiscoveryServiceLowLevel_updateInstance_result&);
  DiscoveryServiceLowLevel_updateInstance_result& operator=(const DiscoveryServiceLowLevel_updateInstance_result&);
  DiscoveryServiceLowLevel_updateInstance_result() {
  }

  virtual ~DiscoveryServiceLowLevel_updateInstance_result() throw();
  CuratorException ex1;

  _DiscoveryServiceLowLevel_updateInstance_result__isset __isset;

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryServiceLowLevel_updateInstance_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryServiceLowLevel_updateInstance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryServiceLowLevel_updateInstance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryServiceLowLevel_updateInstance_presult__isset {
  _DiscoveryServiceLowLevel_updateInstance_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _DiscoveryServiceLowLevel_updateInstance_presult__isset;

class DiscoveryServiceLowLevel_updateInstance_presult {
 public:


  virtual ~DiscoveryServiceLowLevel_updateInstance_presult() throw();
  CuratorException ex1;

  _DiscoveryServiceLowLevel_updateInstance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DiscoveryServiceLowLevelClient : virtual public DiscoveryServiceLowLevelIf {
 public:
  DiscoveryServiceLowLevelClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DiscoveryServiceLowLevelClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void queryForInstance(DiscoveryInstance& _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name, const std::string& id);
  void send_queryForInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name, const std::string& id);
  void recv_queryForInstance(DiscoveryInstance& _return);
  void queryForInstances(std::vector<DiscoveryInstance> & _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name);
  void send_queryForInstances(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name);
  void recv_queryForInstances(std::vector<DiscoveryInstance> & _return);
  void queryForNames(std::vector<std::string> & _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection);
  void send_queryForNames(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection);
  void recv_queryForNames(std::vector<std::string> & _return);
  void registerInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  void send_registerInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  void recv_registerInstance();
  void unregisterInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  void send_unregisterInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  void recv_unregisterInstance();
  void updateInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  void send_updateInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  void recv_updateInstance();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DiscoveryServiceLowLevelProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DiscoveryServiceLowLevelIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DiscoveryServiceLowLevelProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_queryForInstance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryForInstances(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryForNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerInstance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unregisterInstance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateInstance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DiscoveryServiceLowLevelProcessor(boost::shared_ptr<DiscoveryServiceLowLevelIf> iface) :
    iface_(iface) {
    processMap_["queryForInstance"] = &DiscoveryServiceLowLevelProcessor::process_queryForInstance;
    processMap_["queryForInstances"] = &DiscoveryServiceLowLevelProcessor::process_queryForInstances;
    processMap_["queryForNames"] = &DiscoveryServiceLowLevelProcessor::process_queryForNames;
    processMap_["registerInstance"] = &DiscoveryServiceLowLevelProcessor::process_registerInstance;
    processMap_["unregisterInstance"] = &DiscoveryServiceLowLevelProcessor::process_unregisterInstance;
    processMap_["updateInstance"] = &DiscoveryServiceLowLevelProcessor::process_updateInstance;
  }

  virtual ~DiscoveryServiceLowLevelProcessor() {}
};

class DiscoveryServiceLowLevelProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DiscoveryServiceLowLevelProcessorFactory(const ::boost::shared_ptr< DiscoveryServiceLowLevelIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DiscoveryServiceLowLevelIfFactory > handlerFactory_;
};

class DiscoveryServiceLowLevelMultiface : virtual public DiscoveryServiceLowLevelIf {
 public:
  DiscoveryServiceLowLevelMultiface(std::vector<boost::shared_ptr<DiscoveryServiceLowLevelIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DiscoveryServiceLowLevelMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DiscoveryServiceLowLevelIf> > ifaces_;
  DiscoveryServiceLowLevelMultiface() {}
  void add(boost::shared_ptr<DiscoveryServiceLowLevelIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void queryForInstance(DiscoveryInstance& _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryForInstance(_return, projection, discoveryProjection, name, id);
    }
    ifaces_[i]->queryForInstance(_return, projection, discoveryProjection, name, id);
    return;
  }

  void queryForInstances(std::vector<DiscoveryInstance> & _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryForInstances(_return, projection, discoveryProjection, name);
    }
    ifaces_[i]->queryForInstances(_return, projection, discoveryProjection, name);
    return;
  }

  void queryForNames(std::vector<std::string> & _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryForNames(_return, projection, discoveryProjection);
    }
    ifaces_[i]->queryForNames(_return, projection, discoveryProjection);
    return;
  }

  void registerInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerInstance(projection, discoveryProjection, instance);
    }
    ifaces_[i]->registerInstance(projection, discoveryProjection, instance);
  }

  void unregisterInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unregisterInstance(projection, discoveryProjection, instance);
    }
    ifaces_[i]->unregisterInstance(projection, discoveryProjection, instance);
  }

  void updateInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateInstance(projection, discoveryProjection, instance);
    }
    ifaces_[i]->updateInstance(projection, discoveryProjection, instance);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DiscoveryServiceLowLevelConcurrentClient : virtual public DiscoveryServiceLowLevelIf {
 public:
  DiscoveryServiceLowLevelConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DiscoveryServiceLowLevelConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void queryForInstance(DiscoveryInstance& _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name, const std::string& id);
  int32_t send_queryForInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name, const std::string& id);
  void recv_queryForInstance(DiscoveryInstance& _return, const int32_t seqid);
  void queryForInstances(std::vector<DiscoveryInstance> & _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name);
  int32_t send_queryForInstances(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& name);
  void recv_queryForInstances(std::vector<DiscoveryInstance> & _return, const int32_t seqid);
  void queryForNames(std::vector<std::string> & _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection);
  int32_t send_queryForNames(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection);
  void recv_queryForNames(std::vector<std::string> & _return, const int32_t seqid);
  void registerInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  int32_t send_registerInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  void recv_registerInstance(const int32_t seqid);
  void unregisterInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  int32_t send_unregisterInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  void recv_unregisterInstance(const int32_t seqid);
  void updateInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  int32_t send_updateInstance(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const DiscoveryInstance& instance);
  void recv_updateInstance(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
