// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DiscoveryService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::shared;

class DiscoveryServiceHandler : virtual public DiscoveryServiceIf {
 public:
  DiscoveryServiceHandler() {
    // Your initialization goes here
  }

  void getAllInstances(std::vector<DiscoveryInstance> & _return, const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection) {
    // Your implementation goes here
    printf("getAllInstances\n");
  }

  void getInstance(DiscoveryInstance& _return, const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection) {
    // Your implementation goes here
    printf("getInstance\n");
  }

  void makeDiscoveryInstance(DiscoveryInstance& _return, const std::string& name, const std::string& payload, const int32_t port) {
    // Your implementation goes here
    printf("makeDiscoveryInstance\n");
  }

  void noteError(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection, const std::string& instanceId) {
    // Your implementation goes here
    printf("noteError\n");
  }

  void startDiscovery(DiscoveryProjection& _return, const CuratorProjection& projection, const std::string& basePath, const DiscoveryInstance& yourInstance) {
    // Your implementation goes here
    printf("startDiscovery\n");
  }

  void startProvider(DiscoveryProviderProjection& _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& serviceName, const ProviderStrategyType::type providerStrategy, const int32_t downTimeoutMs, const int32_t downErrorThreshold) {
    // Your implementation goes here
    printf("startProvider\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DiscoveryServiceHandler> handler(new DiscoveryServiceHandler());
  shared_ptr<TProcessor> processor(new DiscoveryServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

