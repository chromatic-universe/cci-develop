/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EventService_H
#define EventService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "curator_types.h"

namespace shared {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class EventServiceIf {
 public:
  virtual ~EventServiceIf() {}
  virtual void getNextEvent(CuratorEvent& _return, const CuratorProjection& projection) = 0;
};

class EventServiceIfFactory {
 public:
  typedef EventServiceIf Handler;

  virtual ~EventServiceIfFactory() {}

  virtual EventServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EventServiceIf* /* handler */) = 0;
};

class EventServiceIfSingletonFactory : virtual public EventServiceIfFactory {
 public:
  EventServiceIfSingletonFactory(const boost::shared_ptr<EventServiceIf>& iface) : iface_(iface) {}
  virtual ~EventServiceIfSingletonFactory() {}

  virtual EventServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EventServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<EventServiceIf> iface_;
};

class EventServiceNull : virtual public EventServiceIf {
 public:
  virtual ~EventServiceNull() {}
  void getNextEvent(CuratorEvent& /* _return */, const CuratorProjection& /* projection */) {
    return;
  }
};

typedef struct _EventService_getNextEvent_args__isset {
  _EventService_getNextEvent_args__isset() : projection(false) {}
  bool projection :1;
} _EventService_getNextEvent_args__isset;

class EventService_getNextEvent_args {
 public:

  EventService_getNextEvent_args(const EventService_getNextEvent_args&);
  EventService_getNextEvent_args& operator=(const EventService_getNextEvent_args&);
  EventService_getNextEvent_args() {
  }

  virtual ~EventService_getNextEvent_args() throw();
  CuratorProjection projection;

  _EventService_getNextEvent_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  bool operator == (const EventService_getNextEvent_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    return true;
  }
  bool operator != (const EventService_getNextEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventService_getNextEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EventService_getNextEvent_pargs {
 public:


  virtual ~EventService_getNextEvent_pargs() throw();
  const CuratorProjection* projection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EventService_getNextEvent_result__isset {
  _EventService_getNextEvent_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _EventService_getNextEvent_result__isset;

class EventService_getNextEvent_result {
 public:

  EventService_getNextEvent_result(const EventService_getNextEvent_result&);
  EventService_getNextEvent_result& operator=(const EventService_getNextEvent_result&);
  EventService_getNextEvent_result() {
  }

  virtual ~EventService_getNextEvent_result() throw();
  CuratorEvent success;
  CuratorException ex1;

  _EventService_getNextEvent_result__isset __isset;

  void __set_success(const CuratorEvent& val);

  void __set_ex1(const CuratorException& val);

  bool operator == (const EventService_getNextEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const EventService_getNextEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventService_getNextEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EventService_getNextEvent_presult__isset {
  _EventService_getNextEvent_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _EventService_getNextEvent_presult__isset;

class EventService_getNextEvent_presult {
 public:


  virtual ~EventService_getNextEvent_presult() throw();
  CuratorEvent* success;
  CuratorException ex1;

  _EventService_getNextEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EventServiceClient : virtual public EventServiceIf {
 public:
  EventServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EventServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getNextEvent(CuratorEvent& _return, const CuratorProjection& projection);
  void send_getNextEvent(const CuratorProjection& projection);
  void recv_getNextEvent(CuratorEvent& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EventServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<EventServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EventServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getNextEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EventServiceProcessor(boost::shared_ptr<EventServiceIf> iface) :
    iface_(iface) {
    processMap_["getNextEvent"] = &EventServiceProcessor::process_getNextEvent;
  }

  virtual ~EventServiceProcessor() {}
};

class EventServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EventServiceProcessorFactory(const ::boost::shared_ptr< EventServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< EventServiceIfFactory > handlerFactory_;
};

class EventServiceMultiface : virtual public EventServiceIf {
 public:
  EventServiceMultiface(std::vector<boost::shared_ptr<EventServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EventServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EventServiceIf> > ifaces_;
  EventServiceMultiface() {}
  void add(boost::shared_ptr<EventServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getNextEvent(CuratorEvent& _return, const CuratorProjection& projection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNextEvent(_return, projection);
    }
    ifaces_[i]->getNextEvent(_return, projection);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class EventServiceConcurrentClient : virtual public EventServiceIf {
 public:
  EventServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EventServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getNextEvent(CuratorEvent& _return, const CuratorProjection& projection);
  int32_t send_getNextEvent(const CuratorProjection& projection);
  void recv_getNextEvent(CuratorEvent& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
