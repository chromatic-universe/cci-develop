/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DiscoveryService_H
#define DiscoveryService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "curator_types.h"

namespace shared {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DiscoveryServiceIf {
 public:
  virtual ~DiscoveryServiceIf() {}
  virtual void getAllInstances(std::vector<DiscoveryInstance> & _return, const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection) = 0;
  virtual void getInstance(DiscoveryInstance& _return, const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection) = 0;
  virtual void makeDiscoveryInstance(DiscoveryInstance& _return, const std::string& name, const std::string& payload, const int32_t port) = 0;
  virtual void noteError(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection, const std::string& instanceId) = 0;
  virtual void startDiscovery(DiscoveryProjection& _return, const CuratorProjection& projection, const std::string& basePath, const DiscoveryInstance& yourInstance) = 0;
  virtual void startProvider(DiscoveryProviderProjection& _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& serviceName, const ProviderStrategyType::type providerStrategy, const int32_t downTimeoutMs, const int32_t downErrorThreshold) = 0;
};

class DiscoveryServiceIfFactory {
 public:
  typedef DiscoveryServiceIf Handler;

  virtual ~DiscoveryServiceIfFactory() {}

  virtual DiscoveryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DiscoveryServiceIf* /* handler */) = 0;
};

class DiscoveryServiceIfSingletonFactory : virtual public DiscoveryServiceIfFactory {
 public:
  DiscoveryServiceIfSingletonFactory(const boost::shared_ptr<DiscoveryServiceIf>& iface) : iface_(iface) {}
  virtual ~DiscoveryServiceIfSingletonFactory() {}

  virtual DiscoveryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DiscoveryServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DiscoveryServiceIf> iface_;
};

class DiscoveryServiceNull : virtual public DiscoveryServiceIf {
 public:
  virtual ~DiscoveryServiceNull() {}
  void getAllInstances(std::vector<DiscoveryInstance> & /* _return */, const CuratorProjection& /* projection */, const DiscoveryProviderProjection& /* providerProjection */) {
    return;
  }
  void getInstance(DiscoveryInstance& /* _return */, const CuratorProjection& /* projection */, const DiscoveryProviderProjection& /* providerProjection */) {
    return;
  }
  void makeDiscoveryInstance(DiscoveryInstance& /* _return */, const std::string& /* name */, const std::string& /* payload */, const int32_t /* port */) {
    return;
  }
  void noteError(const CuratorProjection& /* projection */, const DiscoveryProviderProjection& /* providerProjection */, const std::string& /* instanceId */) {
    return;
  }
  void startDiscovery(DiscoveryProjection& /* _return */, const CuratorProjection& /* projection */, const std::string& /* basePath */, const DiscoveryInstance& /* yourInstance */) {
    return;
  }
  void startProvider(DiscoveryProviderProjection& /* _return */, const CuratorProjection& /* projection */, const DiscoveryProjection& /* discoveryProjection */, const std::string& /* serviceName */, const ProviderStrategyType::type /* providerStrategy */, const int32_t /* downTimeoutMs */, const int32_t /* downErrorThreshold */) {
    return;
  }
};

typedef struct _DiscoveryService_getAllInstances_args__isset {
  _DiscoveryService_getAllInstances_args__isset() : projection(false), providerProjection(false) {}
  bool projection :1;
  bool providerProjection :1;
} _DiscoveryService_getAllInstances_args__isset;

class DiscoveryService_getAllInstances_args {
 public:

  DiscoveryService_getAllInstances_args(const DiscoveryService_getAllInstances_args&);
  DiscoveryService_getAllInstances_args& operator=(const DiscoveryService_getAllInstances_args&);
  DiscoveryService_getAllInstances_args() {
  }

  virtual ~DiscoveryService_getAllInstances_args() throw();
  CuratorProjection projection;
  DiscoveryProviderProjection providerProjection;

  _DiscoveryService_getAllInstances_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_providerProjection(const DiscoveryProviderProjection& val);

  bool operator == (const DiscoveryService_getAllInstances_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(providerProjection == rhs.providerProjection))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_getAllInstances_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_getAllInstances_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryService_getAllInstances_pargs {
 public:


  virtual ~DiscoveryService_getAllInstances_pargs() throw();
  const CuratorProjection* projection;
  const DiscoveryProviderProjection* providerProjection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_getAllInstances_result__isset {
  _DiscoveryService_getAllInstances_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryService_getAllInstances_result__isset;

class DiscoveryService_getAllInstances_result {
 public:

  DiscoveryService_getAllInstances_result(const DiscoveryService_getAllInstances_result&);
  DiscoveryService_getAllInstances_result& operator=(const DiscoveryService_getAllInstances_result&);
  DiscoveryService_getAllInstances_result() {
  }

  virtual ~DiscoveryService_getAllInstances_result() throw();
  std::vector<DiscoveryInstance>  success;
  CuratorException ex1;

  _DiscoveryService_getAllInstances_result__isset __isset;

  void __set_success(const std::vector<DiscoveryInstance> & val);

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryService_getAllInstances_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_getAllInstances_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_getAllInstances_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_getAllInstances_presult__isset {
  _DiscoveryService_getAllInstances_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryService_getAllInstances_presult__isset;

class DiscoveryService_getAllInstances_presult {
 public:


  virtual ~DiscoveryService_getAllInstances_presult() throw();
  std::vector<DiscoveryInstance> * success;
  CuratorException ex1;

  _DiscoveryService_getAllInstances_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiscoveryService_getInstance_args__isset {
  _DiscoveryService_getInstance_args__isset() : projection(false), providerProjection(false) {}
  bool projection :1;
  bool providerProjection :1;
} _DiscoveryService_getInstance_args__isset;

class DiscoveryService_getInstance_args {
 public:

  DiscoveryService_getInstance_args(const DiscoveryService_getInstance_args&);
  DiscoveryService_getInstance_args& operator=(const DiscoveryService_getInstance_args&);
  DiscoveryService_getInstance_args() {
  }

  virtual ~DiscoveryService_getInstance_args() throw();
  CuratorProjection projection;
  DiscoveryProviderProjection providerProjection;

  _DiscoveryService_getInstance_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_providerProjection(const DiscoveryProviderProjection& val);

  bool operator == (const DiscoveryService_getInstance_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(providerProjection == rhs.providerProjection))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_getInstance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_getInstance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryService_getInstance_pargs {
 public:


  virtual ~DiscoveryService_getInstance_pargs() throw();
  const CuratorProjection* projection;
  const DiscoveryProviderProjection* providerProjection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_getInstance_result__isset {
  _DiscoveryService_getInstance_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryService_getInstance_result__isset;

class DiscoveryService_getInstance_result {
 public:

  DiscoveryService_getInstance_result(const DiscoveryService_getInstance_result&);
  DiscoveryService_getInstance_result& operator=(const DiscoveryService_getInstance_result&);
  DiscoveryService_getInstance_result() {
  }

  virtual ~DiscoveryService_getInstance_result() throw();
  DiscoveryInstance success;
  CuratorException ex1;

  _DiscoveryService_getInstance_result__isset __isset;

  void __set_success(const DiscoveryInstance& val);

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryService_getInstance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_getInstance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_getInstance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_getInstance_presult__isset {
  _DiscoveryService_getInstance_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryService_getInstance_presult__isset;

class DiscoveryService_getInstance_presult {
 public:


  virtual ~DiscoveryService_getInstance_presult() throw();
  DiscoveryInstance* success;
  CuratorException ex1;

  _DiscoveryService_getInstance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiscoveryService_makeDiscoveryInstance_args__isset {
  _DiscoveryService_makeDiscoveryInstance_args__isset() : name(false), payload(false), port(false) {}
  bool name :1;
  bool payload :1;
  bool port :1;
} _DiscoveryService_makeDiscoveryInstance_args__isset;

class DiscoveryService_makeDiscoveryInstance_args {
 public:

  DiscoveryService_makeDiscoveryInstance_args(const DiscoveryService_makeDiscoveryInstance_args&);
  DiscoveryService_makeDiscoveryInstance_args& operator=(const DiscoveryService_makeDiscoveryInstance_args&);
  DiscoveryService_makeDiscoveryInstance_args() : name(), payload(), port(0) {
  }

  virtual ~DiscoveryService_makeDiscoveryInstance_args() throw();
  std::string name;
  std::string payload;
  int32_t port;

  _DiscoveryService_makeDiscoveryInstance_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_payload(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const DiscoveryService_makeDiscoveryInstance_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(payload == rhs.payload))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_makeDiscoveryInstance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_makeDiscoveryInstance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryService_makeDiscoveryInstance_pargs {
 public:


  virtual ~DiscoveryService_makeDiscoveryInstance_pargs() throw();
  const std::string* name;
  const std::string* payload;
  const int32_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_makeDiscoveryInstance_result__isset {
  _DiscoveryService_makeDiscoveryInstance_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryService_makeDiscoveryInstance_result__isset;

class DiscoveryService_makeDiscoveryInstance_result {
 public:

  DiscoveryService_makeDiscoveryInstance_result(const DiscoveryService_makeDiscoveryInstance_result&);
  DiscoveryService_makeDiscoveryInstance_result& operator=(const DiscoveryService_makeDiscoveryInstance_result&);
  DiscoveryService_makeDiscoveryInstance_result() {
  }

  virtual ~DiscoveryService_makeDiscoveryInstance_result() throw();
  DiscoveryInstance success;
  CuratorException ex1;

  _DiscoveryService_makeDiscoveryInstance_result__isset __isset;

  void __set_success(const DiscoveryInstance& val);

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryService_makeDiscoveryInstance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_makeDiscoveryInstance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_makeDiscoveryInstance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_makeDiscoveryInstance_presult__isset {
  _DiscoveryService_makeDiscoveryInstance_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryService_makeDiscoveryInstance_presult__isset;

class DiscoveryService_makeDiscoveryInstance_presult {
 public:


  virtual ~DiscoveryService_makeDiscoveryInstance_presult() throw();
  DiscoveryInstance* success;
  CuratorException ex1;

  _DiscoveryService_makeDiscoveryInstance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiscoveryService_noteError_args__isset {
  _DiscoveryService_noteError_args__isset() : projection(false), providerProjection(false), instanceId(false) {}
  bool projection :1;
  bool providerProjection :1;
  bool instanceId :1;
} _DiscoveryService_noteError_args__isset;

class DiscoveryService_noteError_args {
 public:

  DiscoveryService_noteError_args(const DiscoveryService_noteError_args&);
  DiscoveryService_noteError_args& operator=(const DiscoveryService_noteError_args&);
  DiscoveryService_noteError_args() : instanceId() {
  }

  virtual ~DiscoveryService_noteError_args() throw();
  CuratorProjection projection;
  DiscoveryProviderProjection providerProjection;
  std::string instanceId;

  _DiscoveryService_noteError_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_providerProjection(const DiscoveryProviderProjection& val);

  void __set_instanceId(const std::string& val);

  bool operator == (const DiscoveryService_noteError_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(providerProjection == rhs.providerProjection))
      return false;
    if (!(instanceId == rhs.instanceId))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_noteError_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_noteError_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryService_noteError_pargs {
 public:


  virtual ~DiscoveryService_noteError_pargs() throw();
  const CuratorProjection* projection;
  const DiscoveryProviderProjection* providerProjection;
  const std::string* instanceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_noteError_result__isset {
  _DiscoveryService_noteError_result__isset() : ex1(false) {}
  bool ex1 :1;
} _DiscoveryService_noteError_result__isset;

class DiscoveryService_noteError_result {
 public:

  DiscoveryService_noteError_result(const DiscoveryService_noteError_result&);
  DiscoveryService_noteError_result& operator=(const DiscoveryService_noteError_result&);
  DiscoveryService_noteError_result() {
  }

  virtual ~DiscoveryService_noteError_result() throw();
  CuratorException ex1;

  _DiscoveryService_noteError_result__isset __isset;

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryService_noteError_result & rhs) const
  {
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_noteError_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_noteError_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_noteError_presult__isset {
  _DiscoveryService_noteError_presult__isset() : ex1(false) {}
  bool ex1 :1;
} _DiscoveryService_noteError_presult__isset;

class DiscoveryService_noteError_presult {
 public:


  virtual ~DiscoveryService_noteError_presult() throw();
  CuratorException ex1;

  _DiscoveryService_noteError_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiscoveryService_startDiscovery_args__isset {
  _DiscoveryService_startDiscovery_args__isset() : projection(false), basePath(false), yourInstance(false) {}
  bool projection :1;
  bool basePath :1;
  bool yourInstance :1;
} _DiscoveryService_startDiscovery_args__isset;

class DiscoveryService_startDiscovery_args {
 public:

  DiscoveryService_startDiscovery_args(const DiscoveryService_startDiscovery_args&);
  DiscoveryService_startDiscovery_args& operator=(const DiscoveryService_startDiscovery_args&);
  DiscoveryService_startDiscovery_args() : basePath() {
  }

  virtual ~DiscoveryService_startDiscovery_args() throw();
  CuratorProjection projection;
  std::string basePath;
  DiscoveryInstance yourInstance;

  _DiscoveryService_startDiscovery_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_basePath(const std::string& val);

  void __set_yourInstance(const DiscoveryInstance& val);

  bool operator == (const DiscoveryService_startDiscovery_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(basePath == rhs.basePath))
      return false;
    if (!(yourInstance == rhs.yourInstance))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_startDiscovery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_startDiscovery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryService_startDiscovery_pargs {
 public:


  virtual ~DiscoveryService_startDiscovery_pargs() throw();
  const CuratorProjection* projection;
  const std::string* basePath;
  const DiscoveryInstance* yourInstance;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_startDiscovery_result__isset {
  _DiscoveryService_startDiscovery_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryService_startDiscovery_result__isset;

class DiscoveryService_startDiscovery_result {
 public:

  DiscoveryService_startDiscovery_result(const DiscoveryService_startDiscovery_result&);
  DiscoveryService_startDiscovery_result& operator=(const DiscoveryService_startDiscovery_result&);
  DiscoveryService_startDiscovery_result() {
  }

  virtual ~DiscoveryService_startDiscovery_result() throw();
  DiscoveryProjection success;
  CuratorException ex1;

  _DiscoveryService_startDiscovery_result__isset __isset;

  void __set_success(const DiscoveryProjection& val);

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryService_startDiscovery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_startDiscovery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_startDiscovery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_startDiscovery_presult__isset {
  _DiscoveryService_startDiscovery_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryService_startDiscovery_presult__isset;

class DiscoveryService_startDiscovery_presult {
 public:


  virtual ~DiscoveryService_startDiscovery_presult() throw();
  DiscoveryProjection* success;
  CuratorException ex1;

  _DiscoveryService_startDiscovery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiscoveryService_startProvider_args__isset {
  _DiscoveryService_startProvider_args__isset() : projection(false), discoveryProjection(false), serviceName(false), providerStrategy(false), downTimeoutMs(false), downErrorThreshold(false) {}
  bool projection :1;
  bool discoveryProjection :1;
  bool serviceName :1;
  bool providerStrategy :1;
  bool downTimeoutMs :1;
  bool downErrorThreshold :1;
} _DiscoveryService_startProvider_args__isset;

class DiscoveryService_startProvider_args {
 public:

  DiscoveryService_startProvider_args(const DiscoveryService_startProvider_args&);
  DiscoveryService_startProvider_args& operator=(const DiscoveryService_startProvider_args&);
  DiscoveryService_startProvider_args() : serviceName(), providerStrategy((ProviderStrategyType::type)0), downTimeoutMs(0), downErrorThreshold(0) {
  }

  virtual ~DiscoveryService_startProvider_args() throw();
  CuratorProjection projection;
  DiscoveryProjection discoveryProjection;
  std::string serviceName;
  ProviderStrategyType::type providerStrategy;
  int32_t downTimeoutMs;
  int32_t downErrorThreshold;

  _DiscoveryService_startProvider_args__isset __isset;

  void __set_projection(const CuratorProjection& val);

  void __set_discoveryProjection(const DiscoveryProjection& val);

  void __set_serviceName(const std::string& val);

  void __set_providerStrategy(const ProviderStrategyType::type val);

  void __set_downTimeoutMs(const int32_t val);

  void __set_downErrorThreshold(const int32_t val);

  bool operator == (const DiscoveryService_startProvider_args & rhs) const
  {
    if (!(projection == rhs.projection))
      return false;
    if (!(discoveryProjection == rhs.discoveryProjection))
      return false;
    if (!(serviceName == rhs.serviceName))
      return false;
    if (!(providerStrategy == rhs.providerStrategy))
      return false;
    if (!(downTimeoutMs == rhs.downTimeoutMs))
      return false;
    if (!(downErrorThreshold == rhs.downErrorThreshold))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_startProvider_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_startProvider_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiscoveryService_startProvider_pargs {
 public:


  virtual ~DiscoveryService_startProvider_pargs() throw();
  const CuratorProjection* projection;
  const DiscoveryProjection* discoveryProjection;
  const std::string* serviceName;
  const ProviderStrategyType::type* providerStrategy;
  const int32_t* downTimeoutMs;
  const int32_t* downErrorThreshold;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_startProvider_result__isset {
  _DiscoveryService_startProvider_result__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryService_startProvider_result__isset;

class DiscoveryService_startProvider_result {
 public:

  DiscoveryService_startProvider_result(const DiscoveryService_startProvider_result&);
  DiscoveryService_startProvider_result& operator=(const DiscoveryService_startProvider_result&);
  DiscoveryService_startProvider_result() {
  }

  virtual ~DiscoveryService_startProvider_result() throw();
  DiscoveryProviderProjection success;
  CuratorException ex1;

  _DiscoveryService_startProvider_result__isset __isset;

  void __set_success(const DiscoveryProviderProjection& val);

  void __set_ex1(const CuratorException& val);

  bool operator == (const DiscoveryService_startProvider_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    return true;
  }
  bool operator != (const DiscoveryService_startProvider_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiscoveryService_startProvider_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiscoveryService_startProvider_presult__isset {
  _DiscoveryService_startProvider_presult__isset() : success(false), ex1(false) {}
  bool success :1;
  bool ex1 :1;
} _DiscoveryService_startProvider_presult__isset;

class DiscoveryService_startProvider_presult {
 public:


  virtual ~DiscoveryService_startProvider_presult() throw();
  DiscoveryProviderProjection* success;
  CuratorException ex1;

  _DiscoveryService_startProvider_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DiscoveryServiceClient : virtual public DiscoveryServiceIf {
 public:
  DiscoveryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DiscoveryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAllInstances(std::vector<DiscoveryInstance> & _return, const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection);
  void send_getAllInstances(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection);
  void recv_getAllInstances(std::vector<DiscoveryInstance> & _return);
  void getInstance(DiscoveryInstance& _return, const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection);
  void send_getInstance(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection);
  void recv_getInstance(DiscoveryInstance& _return);
  void makeDiscoveryInstance(DiscoveryInstance& _return, const std::string& name, const std::string& payload, const int32_t port);
  void send_makeDiscoveryInstance(const std::string& name, const std::string& payload, const int32_t port);
  void recv_makeDiscoveryInstance(DiscoveryInstance& _return);
  void noteError(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection, const std::string& instanceId);
  void send_noteError(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection, const std::string& instanceId);
  void recv_noteError();
  void startDiscovery(DiscoveryProjection& _return, const CuratorProjection& projection, const std::string& basePath, const DiscoveryInstance& yourInstance);
  void send_startDiscovery(const CuratorProjection& projection, const std::string& basePath, const DiscoveryInstance& yourInstance);
  void recv_startDiscovery(DiscoveryProjection& _return);
  void startProvider(DiscoveryProviderProjection& _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& serviceName, const ProviderStrategyType::type providerStrategy, const int32_t downTimeoutMs, const int32_t downErrorThreshold);
  void send_startProvider(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& serviceName, const ProviderStrategyType::type providerStrategy, const int32_t downTimeoutMs, const int32_t downErrorThreshold);
  void recv_startProvider(DiscoveryProviderProjection& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DiscoveryServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DiscoveryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DiscoveryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getAllInstances(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getInstance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_makeDiscoveryInstance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_noteError(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startDiscovery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startProvider(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DiscoveryServiceProcessor(boost::shared_ptr<DiscoveryServiceIf> iface) :
    iface_(iface) {
    processMap_["getAllInstances"] = &DiscoveryServiceProcessor::process_getAllInstances;
    processMap_["getInstance"] = &DiscoveryServiceProcessor::process_getInstance;
    processMap_["makeDiscoveryInstance"] = &DiscoveryServiceProcessor::process_makeDiscoveryInstance;
    processMap_["noteError"] = &DiscoveryServiceProcessor::process_noteError;
    processMap_["startDiscovery"] = &DiscoveryServiceProcessor::process_startDiscovery;
    processMap_["startProvider"] = &DiscoveryServiceProcessor::process_startProvider;
  }

  virtual ~DiscoveryServiceProcessor() {}
};

class DiscoveryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DiscoveryServiceProcessorFactory(const ::boost::shared_ptr< DiscoveryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DiscoveryServiceIfFactory > handlerFactory_;
};

class DiscoveryServiceMultiface : virtual public DiscoveryServiceIf {
 public:
  DiscoveryServiceMultiface(std::vector<boost::shared_ptr<DiscoveryServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DiscoveryServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DiscoveryServiceIf> > ifaces_;
  DiscoveryServiceMultiface() {}
  void add(boost::shared_ptr<DiscoveryServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getAllInstances(std::vector<DiscoveryInstance> & _return, const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllInstances(_return, projection, providerProjection);
    }
    ifaces_[i]->getAllInstances(_return, projection, providerProjection);
    return;
  }

  void getInstance(DiscoveryInstance& _return, const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInstance(_return, projection, providerProjection);
    }
    ifaces_[i]->getInstance(_return, projection, providerProjection);
    return;
  }

  void makeDiscoveryInstance(DiscoveryInstance& _return, const std::string& name, const std::string& payload, const int32_t port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->makeDiscoveryInstance(_return, name, payload, port);
    }
    ifaces_[i]->makeDiscoveryInstance(_return, name, payload, port);
    return;
  }

  void noteError(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection, const std::string& instanceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->noteError(projection, providerProjection, instanceId);
    }
    ifaces_[i]->noteError(projection, providerProjection, instanceId);
  }

  void startDiscovery(DiscoveryProjection& _return, const CuratorProjection& projection, const std::string& basePath, const DiscoveryInstance& yourInstance) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startDiscovery(_return, projection, basePath, yourInstance);
    }
    ifaces_[i]->startDiscovery(_return, projection, basePath, yourInstance);
    return;
  }

  void startProvider(DiscoveryProviderProjection& _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& serviceName, const ProviderStrategyType::type providerStrategy, const int32_t downTimeoutMs, const int32_t downErrorThreshold) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startProvider(_return, projection, discoveryProjection, serviceName, providerStrategy, downTimeoutMs, downErrorThreshold);
    }
    ifaces_[i]->startProvider(_return, projection, discoveryProjection, serviceName, providerStrategy, downTimeoutMs, downErrorThreshold);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DiscoveryServiceConcurrentClient : virtual public DiscoveryServiceIf {
 public:
  DiscoveryServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DiscoveryServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAllInstances(std::vector<DiscoveryInstance> & _return, const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection);
  int32_t send_getAllInstances(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection);
  void recv_getAllInstances(std::vector<DiscoveryInstance> & _return, const int32_t seqid);
  void getInstance(DiscoveryInstance& _return, const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection);
  int32_t send_getInstance(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection);
  void recv_getInstance(DiscoveryInstance& _return, const int32_t seqid);
  void makeDiscoveryInstance(DiscoveryInstance& _return, const std::string& name, const std::string& payload, const int32_t port);
  int32_t send_makeDiscoveryInstance(const std::string& name, const std::string& payload, const int32_t port);
  void recv_makeDiscoveryInstance(DiscoveryInstance& _return, const int32_t seqid);
  void noteError(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection, const std::string& instanceId);
  int32_t send_noteError(const CuratorProjection& projection, const DiscoveryProviderProjection& providerProjection, const std::string& instanceId);
  void recv_noteError(const int32_t seqid);
  void startDiscovery(DiscoveryProjection& _return, const CuratorProjection& projection, const std::string& basePath, const DiscoveryInstance& yourInstance);
  int32_t send_startDiscovery(const CuratorProjection& projection, const std::string& basePath, const DiscoveryInstance& yourInstance);
  void recv_startDiscovery(DiscoveryProjection& _return, const int32_t seqid);
  void startProvider(DiscoveryProviderProjection& _return, const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& serviceName, const ProviderStrategyType::type providerStrategy, const int32_t downTimeoutMs, const int32_t downErrorThreshold);
  int32_t send_startProvider(const CuratorProjection& projection, const DiscoveryProjection& discoveryProjection, const std::string& serviceName, const ProviderStrategyType::type providerStrategy, const int32_t downTimeoutMs, const int32_t downErrorThreshold);
  void recv_startProvider(DiscoveryProviderProjection& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
